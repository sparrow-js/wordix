generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  extensions = [vector]
}

model User {
  id                         String                       @id @default(cuid())
  name                       String?
  username                   String?
  gh_username                String?
  email                      String?                      @unique
  emailVerified              DateTime?
  image                      String?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  suspendedById              String?                      @map("suspendedById")
  invitedById                String?                      @map("invitedById")
  lastActiveAt               DateTime?                    @map("lastActiveAt")
  lastActiveIp               String?                      @map("lastActiveIp")
  lastSignedInAt             DateTime?                    @map("lastSignedInAt")
  lastSignedInIp             String?                      @map("lastSignedInIp")
  suspendedAt                DateTime?                    @map("suspendedAt")
  flags                      Json?                        @map("flags")
  preferences                Json?                        @map("preferences")
  notificationSettings       Json?                        @map("notificationSettings")
  accounts                   Account[]
  apiKeys                    ApiKey[]                     @relation("ApiKeyUser")
  collaboratorsOnCollections CollaboratorsOnCollections[]
  collections                Collection[]
  createdDocuments           Document[]                   @relation("CreatedBy")
  updatedDocuments           Document[]                   @relation("UpdatedBy")
  fileOperations             FileOperation[]
  workspaces                 MemberInWorkspace[]
  revisions                  Revision[]
  runs                       Run[]
  sessions                   Session[]
  invitedBy                  User?                        @relation("UserInvitation", fields: [invitedById], references: [id])
  invitedUsers               User[]                       @relation("UserInvitation")
  suspendedBy                User?                        @relation("UserSuspension", fields: [suspendedById], references: [id])
  suspendedUsers             User[]                       @relation("UserSuspension")
  authentications            VerificationToken[]
  createdMemberships         UserMembership[]             @relation("UserToCreatedBy")
  userMemberships            UserMembership[]             @relation("UserToUserMembership")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier               String
  token                    String                  @unique
  expires                  DateTime
  authenticationProviderId String?
  userId                   String?
  authenticationProvider   AuthenticationProvider? @relation(fields: [authenticationProviderId], references: [id])
  user                     User?                   @relation(fields: [userId], references: [id])

  @@unique([identifier, token])
}

model Collection {
  id                         String                       @id @default(uuid())
  urlId                      String                       @unique
  name                       String
  description                String?
  content                    Json?
  icon                       String?
  color                      String?
  bannerImage                String?
  index                      String?
  permission                 CollectionPermission?
  maintainerApprovalRequired Boolean                      @default(false)
  documentStructure          Json?
  sharing                    Boolean                      @default(true)
  archivedAt                 DateTime?
  createdById                String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  deletedAt                  DateTime?
  privacy                    CollectionPrivacy?
  workspaceId                String?
  collaboratorsOnCollections CollaboratorsOnCollections[]
  createdBy                  User                         @relation(fields: [createdById], references: [id])
  workspace                  Workspace?                   @relation(fields: [workspaceId], references: [id])
  documents                  Document[]
  fileOperations             FileOperation[]
  invitations                Invitation[]
  memberships                UserMembership[]
}

model Document {
  id               String              @id @default(uuid())
  urlId            String              @unique
  title            String
  documentType     String              @default("flow")
  summary          String?
  previousTitles   String[]
  version          Int?
  template         Boolean             @default(false)
  fullWidth        Boolean             @default(false)
  insightsEnabled  Boolean?
  editorVersion    String?
  documentVersion  String?
  icon             String?
  color            String?
  text             String?
  content          Json?
  bannerImage      String?
  publishedContent Json?
  state            Bytes?
  isWelcome        Boolean             @default(false)
  revisionCount    Int                 @default(0)
  publishedAt      DateTime?
  collaboratorIds  String[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  deletedAt        DateTime?
  archivedAt       DateTime?
  importId         String?
  parentDocumentId String?
  lastModifiedById String
  createdById      String
  templateId       String?
  collectionId     String?
  workspaceId      String?
  visibility       DocumentVisibility?
  collection       Collection?         @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  createdBy        User                @relation("CreatedBy", fields: [createdById], references: [id])
  import           FileOperation?      @relation(fields: [importId], references: [id])
  updatedBy        User                @relation("UpdatedBy", fields: [lastModifiedById], references: [id])
  parentDocument   Document?           @relation("ParentChild", fields: [parentDocumentId], references: [id])
  childDocuments   Document[]          @relation("ParentChild")
  templateDocument Document?           @relation("TemplateDocument", fields: [templateId], references: [id])
  derivedDocuments Document[]          @relation("TemplateDocument")
  workspace        Workspace?          @relation(fields: [workspaceId], references: [id])
  revisions        Revision[]
  runs             Run[]
  userMemberships  UserMembership[]

  @@index([workspaceId])
  @@index([collectionId])
}

model FileOperation {
  id           String              @id @default(uuid())
  type         FileOperationType
  format       FileOperationFormat
  state        FileOperationState
  key          String
  url          String?
  error        String?
  size         BigInt
  options      Json?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  userId       String
  workspaceId  String?
  collectionId String?
  documents    Document[]
  collection   Collection?         @relation(fields: [collectionId], references: [id])
  user         User                @relation(fields: [userId], references: [id])
  workspace    Workspace?          @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId], map: "idx_workspace_id")
}

model UserMembership {
  id           String           @id @default(uuid())
  permission   String
  index        String?          @db.VarChar(256)
  collectionId String?          @map("collectionId")
  documentId   String?          @map("documentId")
  sourceId     String?          @map("sourceId")
  userId       String           @map("userId")
  createdById  String           @map("createdById")
  collection   Collection?      @relation(fields: [collectionId], references: [id])
  createdBy    User             @relation("UserToCreatedBy", fields: [createdById], references: [id])
  document     Document?        @relation(fields: [documentId], references: [id])
  source       UserMembership?  @relation("UserMembershipToUserMembership", fields: [sourceId], references: [id])
  children     UserMembership[] @relation("UserMembershipToUserMembership")
  user         User             @relation("UserToUserMembership", fields: [userId], references: [id])

  @@map("user_permissions")
}

model AuthenticationProvider {
  id                  String              @id @default(uuid())
  name                String              @db.VarChar(255)
  enabled             Boolean             @default(true)
  providerId          String              @db.VarChar(255)
  createdAt           DateTime            @default(now())
  workspaceId         String
  userAuthentications VerificationToken[]
  workspace           Workspace           @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@map("authentication_providers")
}

model ApiKey {
  id           String    @id @default(uuid()) @map("id")
  createdAt    DateTime  @default(now()) @map("createdAt")
  updatedAt    DateTime  @updatedAt @map("updatedAt")
  deletedAt    DateTime? @map("deletedAt")
  /// Name must be between the specified character lengths
  name         String    @map("name") @db.VarChar(255)
  /// The hashed value of the API key
  hash         String    @unique @map("hash")
  /// The last 4 characters of the API key
  last4        String    @map("last4") @db.Char(4)
  expiresAt    DateTime? @map("expiresAt")
  lastActiveAt DateTime? @map("lastActiveAt")
  userId       String    @map("userId")
  user         User      @relation("ApiKeyUser", fields: [userId], references: [id], onDelete: Cascade)
}

model Run {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  startedAt    DateTime?
  completedAt  DateTime?
  status       RunStatus @default(PENDING)
  error        String?
  metadata     Json?
  duration     Int?
  inputs       Json?
  inputValues  Json?
  version      Int?
  userId       String?
  documentId   String?
  collectionId String?
  from         String?
  document     Document? @relation(fields: [documentId], references: [id])
  user         User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([documentId])
}

model Workspace {
  id                            String                   @id @default(cuid())
  createdAt                     DateTime                 @default(now())
  updatedAt                     DateTime                 @default(now()) @updatedAt
  name                          String
  icon                          String?
  plan                          Plan                     @default(FREE)
  stripeId                      String?                  @unique
  additionalChatsIndex          Int                      @default(0)
  additionalStorageIndex        Int                      @default(0)
  chatsLimitFirstEmailSentAt    DateTime?
  storageLimitFirstEmailSentAt  DateTime?
  chatsLimitSecondEmailSentAt   DateTime?
  storageLimitSecondEmailSentAt DateTime?
  customChatsLimit              Int?
  customStorageLimit            Int?
  customSeatsLimit              Int?
  isQuarantined                 Boolean                  @default(false)
  isSuspended                   Boolean                  @default(false)
  isPastDue                     Boolean                  @default(false)
  isVerified                    Boolean?
  oneApiToken                   String?
  tokenId                       Int?
  collections                   Collection[]
  credentials                   Credentials[]
  customDomains                 CustomDomain[]
  documents                     Document[]               
  fileOperations                FileOperation[]
  members                       MemberInWorkspace[]
  invitations                   WorkspaceInvitation[]
  authenticationProviders       AuthenticationProvider[]
}

model MemberInWorkspace {
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  userId      String
  workspaceId String
  role        WorkspaceRole
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model WorkspaceInvitation {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  email       String
  workspaceId String
  type        WorkspaceRole
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Credentials {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  workspaceId String
  data        String
  name        String
  type        String
  iv          String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model CustomDomain {
  name        String    @id
  createdAt   DateTime  @default(now())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Invitation {
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  email        String
  collectionId String
  type         CollaborationType
  collection   Collection        @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([email, collectionId])
}

model CollaboratorsOnCollections {
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  userId       String
  collectionId String
  type         CollaborationType
  collection   Collection        @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, collectionId])
}

model Revision {
  id            String   @id @default(uuid())
  version       String?
  editorVersion String   @db.VarChar(255)
  title         String   @db.VarChar(255)
  text          String
  content       Json?
  icon          String?  @db.VarChar(50)
  color         String?  @db.VarChar(7)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  documentId    String
  userId        String
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([userId])
  @@index([createdAt])
}

enum DocumentVisibility {
  private
  public
}

enum UserRole {
  ADMIN
  MEMBER
  GUEST
  VIEWER
}

enum CollectionPrivacy {
  private
  public
}

enum FileOperationType {
  EXPORT
  IMPORT
}

enum FileOperationFormat {
  PDF
  DOCX
}

enum FileOperationState {
  PENDING
  COMPLETED
  EXPIRED
  FAILED
}

enum CollectionPermission {
  read
  read_write
  admin
}

enum RunStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum WorkspaceRole {
  ADMIN
  MEMBER
  GUEST
}

enum Plan {
  FREE
  STARTER
  PRO
  LIFETIME
  OFFERED
  CUSTOM
  UNLIMITED
}

enum CollaborationType {
  READ
  WRITE
  FULL_ACCESS
}


model Pokemon {
  id         String  @id @default(cuid())
  number     Int
  name       String
  type1      String
  type2      String?
  total      Int
  hp         Int
  attack     Int
  defense    Int
  spAtk      Int
  spDef      Int
  speed      Int
  generation Int
  legendary  Boolean

  embedding Unsupported("vector(1536)")?

  @@map("pokemon")
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  reason    String?
  status    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

